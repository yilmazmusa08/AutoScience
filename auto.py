import os
import json
import uvicorn
import warnings
import pandas as pd
from typing import List
from fastapi import FastAPI, File, UploadFile
from pydantic import BaseModel
from sklearn.exceptions import ConvergenceWarning
warnings.filterwarnings('ignore')
pd.set_option('display.max_rows', 50)
pd.set_option('display.max_columns', None)
warnings.filterwarnings('ignore', category=ConvergenceWarning)
from fastapi import FastAPI, Form, Request
from type_pred import *
from sklearn.exceptions import ConvergenceWarning
from fastapi.templating import Jinja2Templates
from starlette.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, RedirectResponse
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from fastapi import HTTPException
from fastapi import Depends
from fastapi.security import OAuth2PasswordBearer
from fastapi.security import OAuth2PasswordRequestForm
from fastapi_login.exceptions import InvalidCredentialsException
from fastapi_login import LoginManager

SECRET = "super-secret-key"
manager = LoginManager(
    SECRET, '/login',
    use_cookie=True
)

engine = create_engine('sqlite:///database.db', echo=True)
Base = declarative_base()
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    username = Column(String)
    password = Column(String)

Base.metadata.create_all(engine)

def save_user_to_database(username: str, password: str) -> int:
    # Yeni bir oturum oluÅŸtur
    session = Session()

    try:
        # KullanÄ±cÄ±yÄ± oluÅŸtur ve veritabanÄ±na ekle
        user = User(username=username, password=password)
        session.add(user)
        session.commit()

        return user.id
    except Exception as e:
        # Hata durumunda geri alma iÅŸlemleri yapÄ±labilir
        print("Database Error:", e)
        session.rollback()
        return -1
    finally:
        # Oturumu kapat
        session.close()

def validate_user(username: str, password: str) -> bool:
    # Yeni bir oturum oluÅŸtur
    session = Session()

    try:
        # KullanÄ±cÄ±yÄ± veritabanÄ±nda ara
        user = session.query(User).filter_by(username=username, password=password).first()

        if user:
            return True
        else:
            return False
    except Exception as e:
        print("Database Error:", e)
        return False
    finally:
        session.close()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

def get_current_user(token: str = Depends(oauth2_scheme)) -> User:
    # EriÅŸim tokenÄ±nÄ± kullanarak mevcut kullanÄ±cÄ±yÄ± doÄŸrulayÄ±n
    # Ã–rneÄŸin, JWT (JSON Web Token) kullanarak eriÅŸim tokenÄ±nÄ± doÄŸrulayabilirsiniz
    # DoÄŸrulama iÅŸlemlerini gerÃ§ekleÅŸtirin ve kullanÄ±cÄ±yÄ± dÃ¶ndÃ¼rÃ¼n
    # Bu Ã¶rnekte, basitÃ§e kullanÄ±cÄ± adÄ±nÄ± token olarak kabul ediyoruz
    user = User(username=token, password="")
    return user


class OutputData(BaseModel):
    data: List[dict]

def is_user_subscribed(user: User) -> bool:
    # KullanÄ±cÄ±nÄ±n abone olup olmadÄ±ÄŸÄ±nÄ± kontrol etmek iÃ§in gereken iÅŸlemleri burada gerÃ§ekleÅŸtirin
    # Ã–rneÄŸin, kullanÄ±cÄ±nÄ±n abonelik durumunu bir veritabanÄ± sorgusuyla kontrol edebilirsiniz
    # EÄŸer kullanÄ±cÄ± abonelik durumuna sahipse True deÄŸerini dÃ¶ndÃ¼rÃ¼n, deÄŸilse False deÄŸerini dÃ¶ndÃ¼rÃ¼n

    # Ã–rnek bir kontrol:
    # Burada kullanÄ±cÄ±nÄ±n abonelik durumunu kontrol eden bir sorgu yapÄ±lÄ±yor
    # Sizin veritabanÄ± yapÄ±nÄ±za ve gereksinimlerinize gÃ¶re bu sorguyu uyarlamalÄ±sÄ±nÄ±z
    session = Session()
    try:
        subscribed_user = session.query(User).filter_by(id=user.id, is_subscribed=True).first()

        if subscribed_user:
            return True
        else:
            return False
    except Exception as e:
        print("Database Error:", e)
        return False
    finally:
        session.close()


app = FastAPI()

templates = Jinja2Templates(directory="template")

# Define a route for serving static files
app.mount("/dist", StaticFiles(directory="dist"), name="dist")
app.mount("/plugins", StaticFiles(directory="plugins"), name="plugins")
app.mount("/static", StaticFiles(directory="static"), name="static")

# HTML page setup
@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    # Render the HTML template
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/register")
async def register_user(request: Request):
    form_data = await request.form()
    username = form_data.get("username")
    password = form_data.get("password")

    if username and password:
        user_id = save_user_to_database(username, password)
        if user_id != -1:
            return {"message": "User registered successfully!"}
        else:
            return {"message": "Failed to register user."}
    else:
        return {"message": "Invalid username or password."}

@app.post("/login")
def login(username: str, password: str):
    # KullanÄ±cÄ±yÄ± veritabanÄ±nda doÄŸrulama iÅŸlemleri burada gerÃ§ekleÅŸtirilir
    # Ã–rneÄŸin, kullanÄ±cÄ± adÄ± ve parolanÄ±n doÄŸru olup olmadÄ±ÄŸÄ±nÄ± kontrol edebilirsiniz
    # EÄŸer doÄŸruysa, kullanÄ±cÄ±nÄ±n oturumunu baÅŸlatÄ±n ve bir eriÅŸim tokenÄ± dÃ¶ndÃ¼rÃ¼n
    # EÄŸer yanlÄ±ÅŸsa, HTTPException kullanarak hata dÃ¶ndÃ¼rÃ¼n
    if validate_user(username, password):
        access_token = manager.create_access_token(username)
        return {"access_token": access_token}
    else:
        raise HTTPException(status_code=401, detail="Invalid credentials")

@app.get('/protected')
def protected_route(user=Depends(manager.optional)):
    if user is None:
        return {"message": "User not found."}
        # Do something ...
    return {'user': user}


@app.post("/", response_class=HTMLResponse)
async def run_analysis_api(request: Request, file: UploadFile = File(...), target: str = Form(None), warning: bool = Form(True), return_stats: bool = Form(False), comp_ratio: float = Form(1.0), current_user: User = Depends(get_current_user)):
    if not is_user_subscribed(current_user):
        raise HTTPException(status_code=403, detail="Not subscribed")
    df = pd.read_csv(file.file)

    sonuc = analysis(df, target=target, warning=warning, return_stats=return_stats) if target else analysis(df, target=None, warning=warning, return_stats=return_stats)

    pca_dict = {}
    for col in sonuc['Role']:

        null_counts = df.isnull().sum()
        empty_cols = null_counts[null_counts >= len(df) * 0.6].index
        df.drop(empty_cols, axis=1, inplace=True)

        for col in df.columns:
            if df[col].dtype == 'object' and df[col].nunique() < 20:
                df[col].fillna(df[col].mode()[0], inplace=True)
                le = LabelEncoder()
                df[col] = le.fit_transform(df[col])
            elif df[col].dtype != 'object':
                df[col].fillna(df[col].mean(), inplace=True)

        df[col] = df[col].fillna(df[col].mean())
        result_dict = calculate_pca(df.select_dtypes(include=['float', 'int']), comp_ratio=comp_ratio)
        pca_dict = {
            'Cumulative Explained Variance Ratio': result_dict['Cumulative Explained Variance Ratio'],
            'Principal Component': result_dict['Principal Component']
        }

    sonuc['PCA'] = pca_dict
    sonuc = set_to_list(sonuc)
    output_file = os.path.join(os.getcwd(), "output.json")

    with open(output_file, "w") as f:
        json.dump(sonuc, f)

    # Redirect to the '/process' endpoint
    return RedirectResponse(url="/process", status_code=302)


@app.get("/process", response_class=HTMLResponse)
async def run_process(request: Request):
    with open("output.json", "r") as f:
        output_dict = json.load(f)

    # Render the HTML template
    return templates.TemplateResponse("index.html", {"request": request, "result": json.dumps(output_dict)})



@app.get("/")
def Description():
    """
    # ProgramÄ±n amacÄ±, veri biliminde veri Ã¶n iÅŸleme iÅŸlemlerinin otomatikleÅŸtirilmesine yardÄ±mcÄ± olmaktÄ±r.ðŸ’» ðŸ’¡
    Bu program veri Ã¶n iÅŸleme adÄ±mlarÄ±nÄ±n bir kÄ±smÄ±nÄ± otomatik hale getirerek veri biliminde Ã§alÄ±ÅŸanlara zaman kazandÄ±rmayÄ± hedeflemektedir.

    Veri Ã¶n iÅŸleme iÅŸlemlerinin bir kÄ±smÄ±nÄ± otomatik hale getirerek veri bilimi alanÄ±nda 
    Ã§alÄ±ÅŸanlara zaman kazandÄ±rmak, daha hÄ±zlÄ± ve doÄŸru sonuÃ§lar elde etmelerine yardÄ±mcÄ± olmaktÄ±r. Bu otomasyon, veri bilimi uzmanlarÄ±na daha fazla
    zaman kazandÄ±rarak veri analizine daha fazla odaklanmalarÄ±nÄ± saÄŸlayabilir.

    Bu fonksiyon, bir veri setinin analiz edilmesi iÃ§in tasarlanmÄ±ÅŸtÄ±r. Fonksiyon, veri setindeki yÃ¼ksek korelasyona sahip sÃ¼tunlarÄ± ve 
    hedef deÄŸiÅŸkenle yÃ¼ksek korelasyona sahip sÃ¼tunlarÄ± belirleyebilir. Fonksiyon ayrÄ±ca her sÃ¼tunun hangi daÄŸÄ±lÄ±ma sahip olduÄŸunu tahmin edebiliyor.
    Bu Ã¶zelliklerin yanÄ± sÄ±ra, fonksiyon, veri seti istatistiklerini iÃ§eren bir sÃ¶zlÃ¼k dÃ¶ndÃ¼rÃ¼yor.

    # Fonksiyonun parametreleri:
    #
            df: analiz edilecek veri seti
            target: hedef deÄŸiÅŸkeni belirleyen bir boolean (varsayÄ±lan olarak None)
            return_stats: veri seti istatistiklerini iÃ§eren bir sÃ¶zlÃ¼k dÃ¶ndÃ¼rmek iÃ§in bir boolean (varsayÄ±lan olarak False)

    Kod, sÃ¼tunlardaki benzersiz deÄŸerlerin frekans daÄŸÄ±lÄ±mÄ±nÄ±n normalleÅŸtiriilmiÅŸ deÄŸerlerinin ortalamasÄ±, standart sapmasÄ±, ortalama kelime sayÄ±sÄ±,
    kelime sayÄ±larÄ±nÄ±n standart sapmasÄ±, karakter sayÄ±sÄ±nÄ±n ortalamasÄ±, karakter sayÄ±larÄ±nÄ±n standart sapmasÄ±, benzersiz deÄŸerlerin sayÄ±sÄ±, en sÄ±k gÃ¶rÃ¼len deÄŸer, 
    en sÄ±k gÃ¶rÃ¼len deÄŸerin oranÄ±, benzersiz deÄŸerlerin oranÄ± ve deÄŸerlerin benzersiz olup olmadÄ±ÄŸÄ± gibi Ã¶zelliklerini hesaplar.

    # Kod nasÄ±l Ã§alÄ±ÅŸÄ±r ?...
    # 
            1) df,target = ...( target yazÄ±lÄ±rsa:target'i tÄ±rnak iÃ§inde yazmaya gerek yok. ), return_stats=True --> Role, Warning,high_corr_target
               feature_importance, distributions, prblem_type
            2) df,target = None, return_stats=True --> Role, Warning, high_corr_target, prblem_type
            Not: EÄŸer target=None ise o zaman  high_corr_target ve feature_importance sonuÃ§larÄ±nÄ± vermez ( targete'e baÄŸlÄ± Ã§alÄ±ÅŸÄ±yorlar )
                 target = None,Send empty value tik'e tÄ±klamanÄ±z yerterli olucaktÄ±r 
    #
            3) df,target = None, return_stats=False --> Role, Warning, distributions, high_corr_target, prblem_type
            4) df,target = None, return_stats=False --> Role, Warning, distributions, high_corr_target, feature_importance, prblem_type
    """
    return Description

uvicorn.run(app, host="127.0.0.1", port=5050)

# kodu durdurmakÄ±cÄ±n bu kodu yaz: sudo lsof -i :8000    sudo kill 12345(buraya  durdurmak Ä±stedÄ±gÄ±n  PID   numarasÄ±nÄ± yaz)
